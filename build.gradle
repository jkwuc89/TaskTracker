buildscript {
	ext {
		appName = "tasktracker"
		appVersion = "1.0.0-SNAPSHOT"
		antCommonsNetVersion = "1.10.+"
		commonsNetVersion = "3.6.+"
		gradleVersion = "4.7.+"
		h2Version = "1.4.+"
		jacksonModuleVersion = "2.9.+"
		junitPluginVersion = "1.1.+"
		junitVersion = "5.+"
		jvmVersion = "1.8"
		kotlinVersion = "1.2.+"
		mssqlDriverVersion = "6.4.0.jre8"
		mysqlConnectorVersion = "5.1.+"
		oroVersion = "2.0.+"
		springBootVersion = "2.0.+"
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPluginVersion}"
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

repositories {
	mavenCentral()
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleVersion
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: "war"

group = "com.keithwedinger"
version = appVersion
sourceCompatibility = jvmVersion

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = jvmVersion
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = jvmVersion
	}
}

configurations {
	ftpAntTask
}

bootRun {
	// Colorize bootRun console/log output
	jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
}

// Configure the executable war to have a different name
bootWar {
	classifier = "boot"
}

// This builds a war without the Apache Tomcat dependencies
war {
	baseName = appName
	enabled = true
	version = appVersion
}

task deployToAzure {
	description "Deploy war to Azure via FTP"
	doLast {
		def console = System.console()
		def ftpServer
		def ftpUsername
		def ftpPassword
		if (console != null) {
			ftpServer = System.console().readLine("\nPlease enter Azure ftp server: ")
			ftpUsername = System.console().readLine("\nPlease enter Azure ftp username: ")
			ftpPassword = System.console().readPassword("Please enter Azure ftp password: ")
		} else {
			logger.error "Cannot get console. Try running without gradle daemon via --no-daemon."
			return
		}
		ant {
			taskdef(name: "ftp",
					classname: "org.apache.tools.ant.taskdefs.optional.net.FTP",
					classpath: configurations.ftpAntTask.asPath)
			ftp(server: "ftp://${ftpServer}",
				userid: "${ftpUsername}",
				password: "${ftpPassword}",
				verbose: "yes",
				remotedir: "site/wwwroot/webapps") {
				fileset(dir: "build/libs") {
					include(name: "${appName}-${appVersion}.war")
				}
			}
		}
	}
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleVersion}")
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

	// See https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
	runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

	// MySQL connector
	runtime("mysql:mysql-connector-java:${mysqlConnectorVersion}")

	// MS SQL Server connector
	runtime("com.microsoft.sqlserver:mssql-jdbc:${mssqlDriverVersion}")

	// Omit Tomcat when building a war
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")

	// Testing dependencies are below
	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

	// JUnit Jupiter API and TestEngine implementation
	testCompile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

	// In memory database
	testCompile("com.h2database:h2:${h2Version}")

	// Dependencies for ftpAntTask
	ftpAntTask("org.apache.ant:ant-commons-net:${antCommonsNetVersion}") {
		module("commons-net:commons-net:${commonsNetVersion}") {
			dependencies "oro:oro:${oroVersion}:jar"
		}
	}
}
